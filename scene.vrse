{
    "name": "Unknown",
    "version": "1",
    "data": {
        "behaviorModules": {
            "__map": true,
            "values": [
                [
                    "Light",
                    {
                        "actorBehaviors": {
                            "__map": true,
                            "values": []
                        },
                        "location": "default/csmLights",
                        "name": "Light",
                        "pawnBehaviors": {
                            "__map": true,
                            "values": [
                                [
                                    "LightPawn",
                                    "class LightPawn {\n    setup() {\n        console.log(\"LightPawn\");\n        let trm = this.service(\"ThreeRenderManager\");\n        let scene =  trm.scene;\n        let camera = trm.camera;\n        let group = this.shape;\n\n        this.removeLights();\n        this.lights = [];\n\n        this.setupCSM(scene, camera, Microverse.THREE);\n\n        const ambient = new Microverse.THREE.AmbientLight( 0xffffff, .5 );\n        group.add(ambient);\n        this.lights.push(ambient);\n\n        this.constructBackground(this.actor._cardData);\n\n        let moduleName = this._behavior.module.externalName;\n        this.addUpdateRequest([`${moduleName}$LightPawn`, \"update\"]);\n\n        this.listen(\"updateShape\", \"updateShape\");\n    }\n\n    removeLights() {\n        if (this.lights) {\n            [...this.lights].forEach((light) => {\n                light.dispose();\n                this.shape.remove(light);\n            });\n        }\n        delete this.lights;\n\n        if (this.csm) {\n\t    for ( let i = 0; i < this.csm.lights.length; i ++ ) {\n\t        this.csm.parent.remove( this.csm.lights[ i ].target );\n\t    }\n            this.csm.remove();\n            this.csm.dispose();\n            delete this.csm;\n        }\n    }\n\n    teardown() {\n        console.log(\"teardown lights\");\n        this.removeLights();\n        let scene = this.service(\"ThreeRenderManager\").scene;\n        scene.background?.dispose();\n        scene.environment?.dispose();\n        scene.background = null;\n        scene.environment = null;\n\n    }\n\n    updateShape(options) {\n        this.constructBackground(options);\n    }\n\n    constructBackground(options) {\n        let assetManager = this.service(\"AssetManager\").assetManager;\n        let dataType = options.dataType;\n        if (!options.dataLocation) {return;}\n        return this.getBuffer(options.dataLocation).then((buffer) => {\n            return assetManager.load(buffer, dataType, Microverse.THREE, options).then((texture) => {\n                let TRM = this.service(\"ThreeRenderManager\");\n                let renderer = TRM.renderer;\n                let scene = TRM.scene;\n                let pmremGenerator = new Microverse.THREE.PMREMGenerator(renderer);\n                pmremGenerator.compileEquirectangularShader();\n\n                let exrCubeRenderTarget = pmremGenerator.fromEquirectangular(texture);\n                let exrBackground = exrCubeRenderTarget.texture;\n\n                let bg = scene.background;\n                let e = scene.environment;\n                scene.background = exrBackground;\n                scene.environment = exrBackground;\n                if(e !== bg) if(bg) bg.dispose();\n                if(e) e.dispose();\n                texture.dispose();\n            });\n        });\n    }\n\n    setupCSM(scene, camera, THREE) {\n        if (this.csm) {\n            this.csm.remove();\n            this.csm.dispose();\n            this.csm = null;\n        }\n\n        let dir = new THREE.Vector3(-2,-2,-0.5);\n        this.csm = new THREE.CSM({\n            fade: true,\n            far: camera.far,\n            maxFar: 1000,\n            cascades: 3,\n            shadowMapSize: 2048,\n            shadowbias: 0.00025,\n            lightDirection: dir,\n            camera: camera,\n            parent: scene,\n            lightIntensity: 0.6,\n            lightFar: 1000,\n            mode: \"practical\"\n        });\n        this.csm.update();\n    }\n\n    update(_time) {\n        if(this.csm) this.csm.update();\n    }\n}"
                                ]
                            ]
                        },
                        "systemModule": false
                    }
                ]
            ]
        },
        "cards": [
            {
                "card": {
                    "layers": [
                        "walk"
                    ],
                    "name": "world model",
                    "placeholder": true,
                    "placeholderColor": 8421504,
                    "placeholderOffset": [
                        0,
                        0,
                        0
                    ],
                    "placeholderSize": [
                        400,
                        0.1,
                        400
                    ],
                    "shadow": true,
                    "singleSided": true,
                    "translation": [
                        0,
                        -1.7,
                        0
                    ],
                    "type": "3d"
                },
                "id": "0001"
            },
            {
                "card": {
                    "behaviorModules": [
                        "Light"
                    ],
                    "dataLocation": "3x-8isHU-R632G4V8vc8lUY7rfjLk5ImtjubwyEyD3H8EAwMCAtCV1ceERQdC1YNC1YbChcJDR0MVhEXVw1XFhE3CjM-Tk1KEDY_LRYrSggWDDNOPCkqSjEJSlcbFxVWDRQMEQsRFVYUERYcGVYaHQoWGQocVhURGwoXDh0KCx1XEAEODj0pHTs0FAsZCAwIQEATM007KD8UQT81QD42LxQ3SU0-GyABHwgzLVccGQwZVw0AGU0oSU4tQU4rFUsQLQ8OGjABIBUoAAoSKCcbQR0NDgEaGysULBpBSDU",
                    "dataType": "exr",
                    "fileName": "/abandoned_parking_4k.jpg",
                    "layers": [
                        "light"
                    ],
                    "name": "light",
                    "type": "lighting"
                },
                "id": "0002"
            },
            {
                "card": {
                    "dataLocation": "35lwX9HzAE37OmfHIL4Ev70VZ3mgflGQ3lijemXAu6iUXUFBRUYPGhpTXFlQRhtARhtWR1pEQFBBG1xaGkAaW1x6R35zAwAHXXtyYFtmB0VbQX4DcWRnB3xEBxpWWlgbQFlBXEZcWBtZXFtRVBtXUEdbVEdRG1hcVkdaQ1BHRlAaB0VmRxh6fF0FbXJeTXhkfFd0BX9Xe3JccHsGegRhU0AFfWoYYGZbZANqeBpRVEFUGgNsBVxCU1hZT3BbAQVWYXhdB0BXV1RTBXcEDQZCXFhHZQ1QfU1fb15nWGQ",
                    "dataScale": [
                        0.7688558240644012,
                        0.7688558240644012,
                        0.7688558240644012
                    ],
                    "fileName": "/sci-fi_door_game.glb",
                    "layers": [
                        "pointer"
                    ],
                    "modelType": "glb",
                    "name": "/sci-fi_door_game.glb"
                },
                "id": "0003"
            },
            {
                "card": {
                    "animationClipIndex": 0,
                    "animationStartTime": 132809,
                    "dataLocation": "33Bd6InSNRh-9L8KxPSj03a_vTNCY-SPGWZtB6gKa2HgW0dHQ0AJHBxVWl9WQB1GQB1QQVxCRlZHHVpcHEYcXVp8QXh1BQYBW310Zl1gAUNdR3gFd2JhAXpCARxQXF4dRl9HWkBaXh1fWl1XUh1RVkFdUkFXHV5aUEFcRVZBQFYcW0pFRXZiVnB_X0BSQ0dDCwtYeAZwY3RfCnR-C3V9ZF98AgZ1UGtKVEN4ZhxXUkdSHF1Dfn9pBlVSa35DQwFGS1lHd18CY0YKC2tUS1lpW3xif0ZiC1tiHmwAAwc",
                    "dataScale": [
                        0.00046809848531158255,
                        0.00046809848531158255,
                        0.00046809848531158255
                    ],
                    "fileName": "/cartoon_halloween_farm.glb",
                    "layers": [
                        "pointer"
                    ],
                    "modelType": "glb",
                    "name": "/cartoon_halloween_farm.glb",
                    "rotation": [
                        0,
                        0,
                        0,
                        1
                    ],
                    "scale": [
                        37.26279284058949,
                        37.26279284058949,
                        37.26279284058949
                    ],
                    "shadow": true,
                    "singleSided": true,
                    "translation": [
                        48.618503957371594,
                        -1.13928128352862,
                        -6
                    ],
                    "type": "3d"
                },
                "id": "0004"
            }
        ]
    }
}